snps=read.table('snp_strict_filter.txt',header=T)
atg=read.table("data/ATGs.txt",sep="\t",header=T)
atg$Start=atg$ATG-300
atg$End=atg$ATG+300
atg$X=NULL
colnames(atg)[1]='Chr'
snp_custom_annotation(snps,atg)
minus=subset(snp_annotated_list,STRAND=="-")
plus=subset(snp_annotated_list,STRAND=="+")
temp=plus
temp=cbind(temp$Start,temp$snp_position)
temp=as.data.frame(temp)
temp$V1=temp$V2-temp$V1
temp$V2=1
temp=na.omit(temp)
temp=temp[order(temp),]
temp_graph_df_plus=data.frame()
temp_df_plus=data.frame()
for (i in 0:600){
temp_df=subset(temp,V1==i)
temp_df[1,2]=sum(temp_df$V2)
temp_df=temp_df[1,]
temp_graph_df_plus=rbind(temp_graph_df_plus,temp_df)}
plot(temp_graph_df_plus)
temp_graph_df_plus$V1=temp_graph_df_plus$V1-300
colnames(temp_graph_df_plus)=c('snp_position','plus')
temp=minus
temp=cbind(temp$Start,temp$snp_position)
temp=as.data.frame(temp)
temp$V1=temp$V2-temp$V1
temp$V2=1
temp=na.omit(temp)
temp=temp[order(temp),]
temp_graph_df_minus=data.frame()
temp_df=data.frame()
for (i in 0:600){
temp_df=subset(temp,V1==i)
temp_df[1,2]=sum(temp_df$V2)
temp_df=temp_df[1,]
temp_graph_df_minus=rbind(temp_graph_df_minus,temp_df)}
plot(temp_graph_df_minus)
temp_graph_df_minus$V1=temp_graph_df_minus$V1-300
temp_graph_df_minus$V2=rev(temp_graph_df_minus$V2) #reverse minus-strand
colnames(temp_graph_df_minus)=c("V1","minus")
graph_df=temp_graph_df_plus
graph_df[,2]=graph_df[,2]+temp_graph_df_minus[,2]
graph_df[,2]=graph_df[,2]/20367*1000
plot(graph_df)
plot(graph_df,main="Number of SNPs near ATG",xlab="Distance from ATG",
ylab="Number of SNPs per 1000 genes")
nucl_count=c(1,2,3)
plot_df_final=as.data.frame(cbind(graph_df$snp_position,graph_df$plus,nucl_count))
colnames(plot_df_final)=c('V1','V2','V3')
library(scales)
plot(type='n',plot_df_final$V1,plot_df_final$V2,xlab="Distanse from ATG",ylab="Number of SNPs per 1000 genes",main="Number of SNPs near ATG")
curren_nucl=subset(plot_df_final,V3=="2")
points(curren_nucl$V1,curren_nucl$V2,col=alpha('red', 0.5),pch=20)
lines(curren_nucl$V1,curren_nucl$V2,col=alpha("red", 0.5))
curren_nucl=subset(plot_df_final,V3=="3")
lines(curren_nucl$V1,curren_nucl$V2,col=alpha('darkgreen', 0.5))
points(curren_nucl$V1,curren_nucl$V2,col=alpha('darkgreen', 0.5),pch=20)
curren_nucl=subset(plot_df_final,V3=="1")
lines(curren_nucl$V1,curren_nucl$V2,col=alpha('blue', 0.3))
colnames(snp)=c("Chr_snp","global","coords","from","to")
anno$len=anno$End-anno$Start
snp_custom_annotation=function(data,annotation,chrom_vector=NULL,enable_XY=NULL,enable_MT=NULL){
require(data.table)
temp_vec=vector()
if(is.null(chrom_vector)){ #Так делать, конечно, плохо, но ничего лучше не придумал. Тащим из аннотации только циферные значения хромосом
options(warn=-1)
temp_vec = as.numeric(unique(data$snp_chrom))
temp_vec  = temp_vec [!is.na(temp_vec)]
chrom_vector  = temp_vec[-1]
options(warn=0)
}
chr_annotation=subset(annotation,Chr=="Chr1") #Аннотируем первую хромосому, как тестовую, т.к. она есть у всех
data_chr_current=subset(data,snp_chrom==1)
print(paste('working on 1 chromosome of ',length(chrom_vector)+1,sep=''))
setDT(data_chr_current)
setDT(chr_annotation)
setkeyv(chr_annotation,c("Start","End"))
data_chr_current[,V11:=snp_position]
temp <- foverlaps(
x=data_chr_current,y=chr_annotation,
by.x=c("V11","snp_position"),
type="within")
temp[,V11:=NULL]
chr_out=na.omit(temp)
if (length(chrom_vector)>0){
for (i in chrom_vector){ #Аннотируем остальные хромосомы
chr_annotation=subset(annotation,Chr==paste('Chr',i,sep=''))
data_chr_current=subset(data,snp_chrom==i)
setDT(data_chr_current)
print(paste('working on ',i,' chromosome of ',length(chrom_vector)+1,sep=''))
setDT(chr_annotation)
setkeyv(chr_annotation,c("Start","End"))
data_chr_current[,V11:=snp_position]
temp <- foverlaps(
x=data_chr_current,y=chr_annotation,
by.x=c("V11","snp_position"),
type="within")
temp[,V11:=NULL]
temp=na.omit(temp)
chr_out=rbind(chr_out,temp)}
}
if(is.null(enable_XY)==FALSE){ #Если поставили enable XY=TRUE- теперь аннотируем половые хромосомы. Сначала X
chr_annotation=subset(annotation,Chr=="ChrX")
print('working on X chromosome')
data_chr_current=subset(data,snp_chrom=="X")
setDT(data_chr_current)
setDT(chr_annotation)
setkeyv(chr_annotation,c("Start","End"))
data_chr_current[,V11:=snp_position]
temp <- foverlaps(
x=data_chr_current,y=chr_annotation,
by.x=c("V11","snp_position"),
type="within")
temp[,V11:=NULL]
temp=na.omit(temp)
chr_out=rbind(chr_out,temp)
chr_annotation=subset(annotation,Chr=="ChrY") #Теперь Y
print('working on Y chromosome')
data_chr_current=subset(data,snp_chrom=="Y")
setDT(data_chr_current)
setDT(chr_annotation)
setkeyv(chr_annotation,c("Start","End"))
data_chr_current[,V11:=snp_position]
temp <- foverlaps(
x=data_chr_current,y=chr_annotation,
by.x=c("V11","snp_position"),
type="within")
temp[,V11:=NULL]
temp=na.omit(temp)
chr_out=rbind(chr_out,temp)}
if(is.null(enable_MT)==FALSE){ #если enable_MT=TRUE, аннотируем митохондриальную хромосому.
print('working on MT chromosome, almost done')
chr_annotation=subset(annotation,Chr=="ChrMT")
data_chr_current=subset(data,snp_chrom=="MT")
setDT(data_chr_current)
setDT(chr_annotation)
setkeyv(chr_annotation,c("Start","End"))
data_chr_current[,V11:=snp_position]
temp <- foverlaps(
x=data_chr_current,y=chr_annotation,
by.x=c("V11","snp_position"),
type="within")
temp[,V11:=NULL]
temp=na.omit(temp)
chr_out=rbind(chr_out,temp)}
snp_annotated_list<<-unique(na.omit(rbind(chr_out,temp))) #Вывод и уборка за функцией
rm(temp,chr_out,chrom_vector,data_chr_current,chr_annotation,temp_vec)
print(paste('finished annotating ',dim(snp_annotated_list)[1],' SNPs. Data contained in data.frame called snp_annotated_list',sep=''))
}
install.packages("data.table")
data=read.table('./data/transfac.txt',header=T)
plot(data,
main="Transcription Factor Binding Sites (TRANSFAC database)",
ylab='Fraction of promoters with TFBS',
xlab='Distance from TSS, nt')
lines(x,y,col='blue',lwd=3)
